name: Linux

# Qt官方没有linux平台的x86包
on: 
  push:
    paths:
      - '*.pro'
      - '**'
      - '.github/workflows/ubuntu.yml'
  pull_request:
    paths:
      - '*.pro'
      - '**'
      - '.github/workflows/ubuntu.yml' 
jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        #os: [ubuntu-18.04,ubuntu-20.04]
        # qt_ver: [5.9.9,5.12.10,5.15.2]
        
        os: [ubuntu-22.04]
        qt_ver: [6.6.3]
        
        qt_arch: [gcc_64]
        
    env:
        targetName: Knot
        VERSION: Linux
        orgName: Knot
        ONEDRIVE_SECRET: ${{ secrets.ONEDRIVE_SECRET }}
        QT_VERSION: 6.6.3
        QT_ARCH: gcc_64
        QT_INSTALL_DIR: /opt/qt/6.6.3/gcc_64  
        QT_INSTALL_QML: /opt/qt/6.6.3/gcc_64/qml  
        QML2_IMPORT_PATH: ${{ github.workspace }}/qml:${{ env.QT_INSTALL_QML }}
      
    steps:
      
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.qt_ver }}
          #host: linux
          cached: 'false'
          
          modules: qtcharts qtwebengine qtsensors qtwebview qtlocation qtwebchannel qt5compat qtpositioning
      
      - name: ubuntu install GL library
        run: |
         sudo apt-get install -y libglew-dev libglfw3-dev libxcb*
         
         sudo apt-get install libxkbcommon-dev
         
         sudo add-apt-repository universe
         sudo apt install libfuse2
         sudo apt-get install libsecret-1-dev

         sudo apt-get install -y libqt6serialport6

      - uses: actions/checkout@v2
        with:
                  fetch-depth: 1
                  
      - name: build ubuntu
        run: |
                  qmake
                  make

      - name: Setup QML Paths
        run: |
          # 验证路径存在性
          echo "Qt安装路径: ${{ env.QT_INSTALL_DIR }}"
          ls -l ${{ env.QT_INSTALL_DIR }}/qml/QtQuick

          # 创建项目QML目录
          mkdir -p ${{ github.workspace }}/qml

          - name: Scan QML Dependencies
            run: |
          # 安装依赖工具
          sudo apt-get install -y jq

          # 使用qmlimportscanner生成依赖清单
          ${{ env.QT_INSTALL_DIR }}/bin/qmlimportscanner \
            -importPath ${{ env.QT_INSTALL_QML }} \
            -importPath ${{ github.workspace }}/qml \
            -rootPath ${{ github.workspace }} \
            -jsoutput qml_deps.json

          # 解析JSON输出
          jq -r '.[] | select(.type == "module") | .path' qml_deps.json > qml_paths.txt

          - name: Deploy QML Modules
            run: |
          OUTPUT_QML_DIR=${{ github.workspace }}/bin/release/qml
          mkdir -p $OUTPUT_QML_DIR

          # 拷贝项目自定义QML
          if grep -q "${{ github.workspace }}" qml_paths.txt; then
            grep "${{ github.workspace }}" qml_paths.txt | while read -r path; do
              rel_path=${path#${{ github.workspace }}"/"}
              mkdir -p "$OUTPUT_QML_DIR/$(dirname "$rel_path")"
              cp -r "$path" "$OUTPUT_QML_DIR/$rel_path"
            done
          fi

          # 拷贝Qt官方QML
          grep "${{ env.QT_INSTALL_QML }}" qml_paths.txt | while read -r path; do
            rel_path=${path#${{ env.QT_INSTALL_QML }}"/"}
            mkdir -p "$OUTPUT_QML_DIR/$rel_path"
            cp -r "$path"/* "$OUTPUT_QML_DIR/$rel_path/"
          done

          # 强制包含必要模块（即使未被引用）
          cp -r ${{ env.QT_INSTALL_QML }}/QtQml/WorkerScript $OUTPUT_QML_DIR/QtQml/
          cp -r ${{ env.QT_INSTALL_QML }}/QtQuick/Controls $OUTPUT_QML_DIR/QtQuick/

          - name: Deploy WebEngine
            run: |
          # 处理WebEngine特殊依赖
          mkdir -p ${{ github.workspace }}/bin/release/libexec
          cp -r ${{ env.QT_INSTALL_DIR }}/libexec/QtWebEngineProcess ${{ github.workspace }}/bin/release/libexec/

          # 拷贝WebEngine资源文件
          RESOURCE_DIR="${{ env.QT_INSTALL_DIR }}/resources"
          mkdir -p ${{ github.workspace }}/bin/release/resources
          cp -r $RESOURCE_DIR/qtwebengine* ${{ github.workspace }}/bin/release/resources/



      - name: install linuxdeployqt 
        run: |
          wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
          # wget -c -nv "https://github.com/linuxdeploy/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
          chmod a+x linuxdeployqt-continuous-x86_64.AppImage

      - name: Remove unused SQL drivers (SAFE MODE)
        run: |
            # 确保 qmake 可用
            export PATH="${{ env.QT_DIR }}/bin:$PATH"

            # 获取插件目录
            QT_PLUGINS_DIR=$(qmake -query QT_INSTALL_PLUGINS)

            # 创建备份目录（以防万一）
            mkdir -p /tmp/qt-drivers-backup
            cp "$QT_PLUGINS_DIR/sqldrivers/"* /tmp/qt-drivers-backup/
            echo "已备份驱动到: /tmp/qt-drivers-backup"

            # 安全删除非SQLite驱动
            find "$QT_PLUGINS_DIR/sqldrivers" \
              -name "libqsql*.so" \
              ! -name "*sqlite*" \
              ! -name "*SQLite*" \
              -delete

            # 最终验证
            echo "当前SQL驱动:"
            ls -l "$QT_PLUGINS_DIR/sqldrivers"
            echo "SQLite驱动状态:"
            ldd "$QT_PLUGINS_DIR/sqldrivers/libqsqlite.so" || true
          
      # 打包
      - name: package
        run: |
         cp res/icon.png bin/release/icon.png
         cp res/default.desktop bin/release/default.desktop
         cp ExtBin/AppRun bin/release/AppRun
         chmod +x bin/release/AppRun
         
         # cp -r qml bin/release/qml

         #cp ExtBin/libfcitx5platforminputcontextplugin.so /home/runner/work/Knot/Qt/6.6.0/gcc_64/plugins/platforminputcontexts/libfcitx5platforminputcontextplugin.so
         #chmod 755 /home/runner/work/Knot/Qt/6.6.0/gcc_64/plugins/platforminputcontexts/libfcitx5platforminputcontextplugin.so

         # 获取 Qt6 插件目录
         QT6_PLUGINS_DIR="${{ env.Qt6_DIR }}/../../plugins/platforminputcontexts"

         # 检查插件文件是否存在
         if [ ! -f "ExtBin/libfcitx5platforminputcontextplugin.so" ]; then
         echo "Error: Plugin file not found in ExtBin/"
         exit 1
         fi

         # 拷贝并设置权限
         mkdir -p "$QT6_PLUGINS_DIR"
         cp ExtBin/libfcitx5platforminputcontextplugin.so "$QT6_PLUGINS_DIR/"
         chmod 755 "$QT6_PLUGINS_DIR/libfcitx5platforminputcontextplugin.so"

         echo "Copied to: $QT6_PLUGINS_DIR"
         ls -l "$QT6_PLUGINS_DIR"

         mkdir bin/release/lib/
         cp -r ExtBin/nss/* bin/release/lib/

         #cp ExtBin/libcrypto.so.1.1 bin/release/lib/libcrypto.so.1.1
         #cp ExtBin/libssl.so.1.1 bin/release/lib/libssl.so.1.1


         export VERSION # linuxdeployqt uses this for naming the file
         #./linuxdeployqt-continuous-x86_64.AppImage bin/release/${targetName} -unsupported-allow-new-glibc -appimage -extra-plugins=webview
         #chmod +x ${{ env.targetName }}-${{ env.VERSION }}-x86_64.AppImage

         # 执行深度打包
         ./linuxdeployqt-continuous-x86_64.AppImage \
         bin/release/${targetName} \
         -unsupported-allow-new-glibc \
         -qmldir=${{ env.QT_INSTALL_QML }} \
         -qml-import=${PWD}/qml \
         -extra-plugins=webengine,webview \
         -bundle-non-qt-libs \
         -appimage \
         -verbose=3



      # 上传artifacts          
      - uses: actions/upload-artifact@v4
        with:
          
          name: ${{ env.orgName }}-${{ env.VERSION }}-x86_64.AppImage
          path: ${{ env.targetName }}-${{ env.VERSION }}-x86_64.AppImage
          
          #name: ${{ env.orgName }}-${{ matrix.os }}-${{ matrix.qt_ver }}-${{ env.VERSION }}-x86_64.AppImage
          #path: ${{ env.targetName }}-${{ env.VERSION }}-x86_64.AppImage
          
     # tag 上传Release
      - name: uploadRelease
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          
          file: ${{ env.targetName }}-${{ env.VERSION }}-x86_64.AppImage
          asset_name: ${{ env.orgName }}-${{ env.VERSION }}-x86_64.AppImage
          
          #file: ${{ env.targetName }}-${{ env.VERSION }}-x86_64.AppImage
          #asset_name: ${{ env.orgName }}-${{ matrix.os }}-${{ matrix.qt_ver }}-${{ env.VERSION }}-x86_64.AppImage
          
          tag: ${{ github.ref }}
          overwrite: true     
          
          
    
