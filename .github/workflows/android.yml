name: Qt6 Android CI

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  QT_VERSION: "6.6.3"
  QT_ARCH: "android_arm64_v8a"
  DESKTOP_ARCH: "win64_mingw"
  NDK_VERSION: "26.1.10909125"
  ANDROID_API_LEVEL: "34"
  JAVA_VERSION: "17"

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
        with:
          path: 'src'

      # 1. 安装JDK
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}

      # 2. 安装NDK
      - name: Install NDK
        run: |
          $ndkUrl = "https://dl.google.com/android/repository/android-ndk-r26b-windows.zip"
          Invoke-WebRequest -Uri $ndkUrl -OutFile "ndk.zip"
          Expand-Archive -Path "ndk.zip" -DestinationPath "android-sdk\ndk"
          Rename-Item -Path "android-sdk\ndk\android-ndk-r26b" -NewName $env:NDK_VERSION
          echo "ANDROID_NDK_ROOT=$env:GITHUB_WORKSPACE\android-sdk\ndk\$env:NDK_VERSION" >> $env:GITHUB_ENV
          echo "$env:ANDROID_NDK_ROOT\prebuilt\windows-x86_64\bin" >> $env:GITHUB_PATH

      # 3. 安装桌面版Qt（满足Android构建依赖）
      - name: Install Desktop Qt
        run: |
          python -m pip install --upgrade aqtinstall
          aqt install-qt windows desktop $env:QT_VERSION $env:DESKTOP_ARCH `
            -m qtcharts qtsensors qtwebview qtlocation qtwebchannel qt5compat qtpositioning `
            --outputdir "$env:GITHUB_WORKSPACE\Qt"

      # 4. 安装Android版Qt（使用默认配置）
      - name: Install Android Qt
        run: |
          aqt install-qt windows android $env:QT_VERSION $env:QT_ARCH `
            -m qtcharts qtsensors qtwebview qtlocation qtwebchannel qt5compat qtpositioning `
            --outputdir "$env:GITHUB_WORKSPACE\Qt"

      # 5. 构建项目
      - name: Build
        shell: cmd
        run: |
          echo "=== 初始化环境 ==="
          set "QT_ROOT=%GITHUB_WORKSPACE%\Qt\%QT_VERSION%\%QT_ARCH%"
          set "DESKTOP_QT_ROOT=%GITHUB_WORKSPACE%\Qt\%QT_VERSION%\%DESKTOP_ARCH%"
          set "NDK_TOOLCHAIN=%ANDROID_NDK_ROOT%\toolchains\llvm\prebuilt\windows-x86_64\bin"
          set "PATH=%QT_ROOT%\bin;%DESKTOP_QT_ROOT%\bin;%ANDROID_NDK_ROOT%\prebuilt\windows-x86_64\bin;%NDK_TOOLCHAIN%;%PATH%"

          echo "=== 验证基本命令 ==="
          where cd
          where echo
          where set

          echo "=== 验证src目录 ==="
          if exist "%GITHUB_WORKSPACE%\src" (
            echo "src目录存在，尝试进入..."
            cd "%GITHUB_WORKSPACE%\src" || (echo "::error::无法进入src目录！" & exit 1)
          ) else (
            echo "::error::src目录不存在！"
            dir "%GITHUB_WORKSPACE%"
            exit 1
          )

          echo "=== 环境变量 ==="
          set

          echo "=== 验证NDK工具链 ==="
          where make.exe
          if errorlevel 1 (
            echo "::error::make.exe不在PATH中！"
            dir "%ANDROID_NDK_ROOT%\prebuilt\windows-x86_64\bin"
            exit 1
          )
          make --version

          echo "=== 验证编译器 ==="
          where clang++
          if errorlevel 1 (
            echo "::error::clang++不在PATH中！"
            dir "%NDK_TOOLCHAIN%"
            exit 1
          )
          clang++ --version

          echo "=== 生成Makefile ==="
          call qmake.bat Knot.pro -spec android-clang CONFIG+=release ANDROID_ABIS=arm64-v8a
          if errorlevel 1 (
            echo "::error::qmake失败！"
            exit 1
          )

          echo "=== 检查Makefile中的源文件 ==="
          type Makefile | findstr /C:"SOURCES ="
          type Makefile | findstr /C:"OBJECTS ="

          echo "=== 执行make（带详细日志） ==="
          "%ANDROID_NDK_ROOT%\prebuilt\windows-x86_64\bin\make.exe" -j8 V=1
          if errorlevel 1 (
            echo "::error::编译失败！"
            type make_output.log
            exit 1
          )

          echo "=== 检查编译产物 ==="
          dir /s *.so

      # 6. 生成APK
      - name: Generate APK
        shell: cmd
        run: |
            echo "=== 初始化APK生成环境（匹配本地配置） ==="

            REM 硬编码使用mingw_64目录（与本地一致）
            set "QT_MINGW_BIN=%GITHUB_WORKSPACE%\Qt\%QT_VERSION%\mingw_64\bin"

            REM 验证路径是否存在
            if not exist "%QT_MINGW_BIN%" (
              echo "::error::Qt mingw目录不存在！路径：%QT_MINGW_BIN%"
              exit 1
            )

            REM 验证androiddeployqt是否存在
            set "ANDROID_DEPLOY_QT=%QT_MINGW_BIN%\androiddeployqt.exe"
            if not exist "%ANDROID_DEPLOY_QT%" (
              echo "::error::androiddeployqt不存在！路径：%ANDROID_DEPLOY_QT%"
              exit 1
            )

            REM 将路径添加到环境变量
            set "PATH=%QT_MINGW_BIN%;%PATH%"

            cd "%GITHUB_WORKSPACE%\src"

            echo "=== 验证部署配置文件 ==="
            if exist "android-Knot-deployment-settings.json" (
              echo "部署配置文件存在：android-Knot-deployment-settings.json"
            ) else (
              echo "::error::部署配置文件缺失！"
              dir
              exit 1
            )

            REM 定义输出路径变量，确保路径格式正确
            set "ANDROID_BUILD_DIR=build\android-build"

            echo "=== 调用androiddeployqt（触发Gradle打包） ==="
            "%ANDROID_DEPLOY_QT%" ^
              --input android-Knot-deployment-settings.json ^
              --output "%ANDROID_BUILD_DIR%" ^  # 使用变量确保路径格式一致
              --android-platform android-%ANDROID_API_LEVEL% ^
              --jdk "%JAVA_HOME%" ^
              --gradle --release ^
              --verbose  # 添加详细输出，帮助调试

            if errorlevel 1 (
              echo "::error::APK生成失败！"
              exit 1
            )

            echo "=== 检查APK产物 ==="
            set APK_PATH=%ANDROID_BUILD_DIR%\build\outputs\apk\release\*.apk
            if exist "%APK_PATH%" (
              echo "APK生成成功:"
              dir "%APK_PATH%"
            ) else (
              echo "::error::APK未生成！"
              exit 1
            )

      # 7. 上传产物
      - name: Upload APK
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: Knot-APK
          path: src\build\android-build\build\outputs\apk\release\*.apk
