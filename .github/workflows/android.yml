name: Build Android APK

on:
  push:
    branches: [ main ]
    paths:
      - '**'
      - '!stats.txt'
      - '!README.md'
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      QT_VERSION: "6.6.3"
      QT_ARCH: "android_arm64_v8a"
      ANDROID_API_LEVEL: "34"
      NDK_VERSION: "26.3.11579264"  # 与本地一致的版本
      BUILD_TOOLS_VERSION: "34.0.0"
      # 手动指定 NDK 安装路径（模拟本地）
      NDK_INSTALL_PATH: "/usr/local/lib/android/sdk/ndk"
      ANDROID_SDK_ROOT: "/usr/local/lib/android/sdk"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libgl1-mesa-dev unzip  # 增加 unzip 用于解压 NDK

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 关键修改：手动下载并安装 NDK（避免 CI 工具的自动裁剪）
      - name: 手动安装完整 NDK（与本地一致）
        run: |
          # 创建 NDK 安装目录
          mkdir -p ${{ env.NDK_INSTALL_PATH }}
          # 下载与本地完全一致的 NDK 包（使用 Google 官方源）
          wget https://dl.google.com/android/repository/android-ndk-r26b-linux.zip -O ndk.zip
          # 解压到指定目录
          unzip -q ndk.zip -d ${{ env.NDK_INSTALL_PATH }}
          # 重命名为版本号目录（确保路径与本地一致）
          mv ${{ env.NDK_INSTALL_PATH }}/android-ndk-r26b ${{ env.NDK_INSTALL_PATH }}/${{ env.NDK_VERSION }}
          # 验证 NDK 完整性（关键步骤）
          echo "NDK 安装路径：${{ env.NDK_INSTALL_PATH }}/${{ env.NDK_VERSION }}"
          ls -la ${{ env.NDK_INSTALL_PATH }}/${{ env.NDK_VERSION }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include/bits/

      # 安装 Android SDK 基础组件（仅保留必要部分）
      - name: 安装 Android SDK 工具
        uses: android-actions/setup-android@v3
        with:
          sdk-version: ${{ env.ANDROID_API_LEVEL }}
          build-tools: ${{ env.BUILD_TOOLS_VERSION }}

      # 调试：确认 NDK 头文件是否存在（与本地对比）
      - name: 验证 NDK 头文件
        run: |
          echo "搜索 libc-header-start.h 是否存在..."
          find ${{ env.NDK_INSTALL_PATH }}/${{ env.NDK_VERSION }} -name "libc-header-start.h"
          # 输出路径供对比本地
          echo "本地请执行：find /path/to/your/local/ndk/${{ env.NDK_VERSION }} -name 'libc-header-start.h'"

      - name: Install Qt for Android
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          target: android
          arch: ${{ env.QT_ARCH }}
          modules: qt5compat qtcharts qtsensors qtlocation qtpositioning qtwebview
          install-deps: true
          archive-folder-restructure: "yes"
          mirror: "https://mirrors.tuna.tsinghua.edu.cn/qt/"

      - name: 设置环境变量
        run: |
          # 强制指定 NDK 路径（与本地一致）
          echo "ANDROID_NDK_ROOT=${{ env.NDK_INSTALL_PATH }}/${{ env.NDK_VERSION }}" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=${{ env.ANDROID_SDK_ROOT }}" >> $GITHUB_ENV

          # 设置 Qt 路径
          QT_DIR=$(find /home/runner/Qt -name "android_arm64_v8a" | grep "${{ env.QT_VERSION }}" | head -n 1)
          echo "QT_DIR=$QT_DIR" >> $GITHUB_ENV
          echo "$QT_DIR/bin" >> $GITHUB_PATH

          # Android 构建参数
          echo "ANDROID_MIN_SDK_VERSION=${{ env.ANDROID_API_LEVEL }}" >> $GITHUB_ENV
          echo "ANDROID_TARGET_SDK_VERSION=${{ env.ANDROID_API_LEVEL }}" >> $GITHUB_ENV
          echo "ANDROID_BUILD_TOOLS_VERSION=${{ env.BUILD_TOOLS_VERSION }}" >> $GITHUB_ENV

      - name: Configure project
        run: |
          cd ${{ github.workspace }}

          # 明确 NDK 工具链和 sysroot（与本地编译路径一致）
          ANDROID_NDK_ROOT="${{ env.NDK_INSTALL_PATH }}/${{ env.NDK_VERSION }}"
          TOOLCHAIN_PATH="$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64"
          SYSROOT="$TOOLCHAIN_PATH/sysroot"  # 本地环境中此路径应存在头文件

          echo "使用 NDK: $ANDROID_NDK_ROOT"
          echo "使用 sysroot: $SYSROOT"

          # 执行 qmake，强制编译器使用 NDK 头文件（屏蔽系统目录）
          qmake Knot.pro \
            -spec android-clang \
            "CONFIG+=release" \
            "ANDROID_ABIS=arm64-v8a" \
            "ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT" \
            "QMAKE_CC=$TOOLCHAIN_PATH/bin/aarch64-linux-android$ANDROID_API_LEVEL-clang" \
            "QMAKE_CXX=$TOOLCHAIN_PATH/bin/aarch64-linux-android$ANDROID_API_LEVEL-clang++" \
            "QMAKE_LINK=$TOOLCHAIN_PATH/bin/aarch64-linux-android$ANDROID_API_LEVEL-clang++" \
            # 关键：强制不使用系统头文件，只从 NDK 读取
            "QMAKE_CFLAGS+=-nostdinc -isystem $SYSROOT/usr/include" \
            "QMAKE_CXXFLAGS+=-nostdinc++ -isystem $SYSROOT/usr/include -isystem $SYSROOT/usr/include/c++/v1" \
            "QMAKE_LIBS+=-L$SYSROOT/usr/lib/aarch64-linux-android/$ANDROID_API_LEVEL" \
            "ANDROID_MIN_SDK_VERSION=$ANDROID_API_LEVEL" \
            "ANDROID_TARGET_SDK_VERSION=$ANDROID_API_LEVEL"

      - name: Build Android APK
        run: |
          make -j$(nproc)
          make apk INSTALL_ROOT=build
          mkdir -p ${{ github.workspace }}/output
          mv build/android-build/build/outputs/apk/release/android-build-release-unsigned.apk \
             ${{ github.workspace }}/output/app-release-unsigned.apk

      - name: Sign APK
        run: |
          if [ -z "$KEY_STORE_PASSWORD" ] || [ -z "$KEY_PASSWORD" ] || [ -z "$KEY_ALIAS" ]; then
            echo "::warning::Signing secrets not configured. Skipping signing."
            exit 0
          fi
          jarsigner -verbose \
            -sigalg SHA256withRSA \
            -digestalg SHA-256 \
            -keystore android/app/my-release-key.keystore \
            -storepass "${{ secrets.KEY_STORE_PASSWORD }}" \
            -keypass "${{ secrets.KEY_PASSWORD }}" \
            ${{ github.workspace }}/output/app-release-unsigned.apk \
            "${{ secrets.KEY_ALIAS }}"
          $ANDROID_SDK_ROOT/build-tools/$ANDROID_BUILD_TOOLS_VERSION/zipalign -v 4 \
            ${{ github.workspace }}/output/app-release-unsigned.apk \
            ${{ github.workspace }}/output/app-release.apk
        env:
          KEY_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: Android-APK
          path: ${{ github.workspace }}/output/*
          if-no-files-found: error
