name: Build Android APK

on:
  push:
    branches: [ main ]
    paths:
      - '**'
      - '!stats.txt'
      - '!README.md'
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      QT_VERSION: "6.6.3"
      QT_ARCH: "android_arm64_v8a"
      ANDROID_API_LEVEL: "34"
      NDK_VERSION: "26.1.10909125"
      BUILD_TOOLS_VERSION: "34.0.0"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # 使用特定版本JDK
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # 推荐的Android SDK设置
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      id: android-sdk
      with:
        ndk-version: ${{ env.NDK_VERSION }}
        sdk-version: ${{ env.ANDROID_API_LEVEL }}

    # 成功的Qt安装方法 - 使用稳定配置
    - name: Install Qt for Android
      uses: jurplel/install-qt-action@v4
      with:
        version: ${{ env.QT_VERSION }}
        target: android
        arch: ${{ env.QT_ARCH }}
        modules: qtbase qtsvg qtdeclarative qt5compat qtcharts qtsensors qtlocation qtpositioning qtwebview
        install-deps: true
        # 关键设置 - 确保正确处理路径
        aqt-installer-option: "--outputdir /home/runner/Qt"
        archive-folder-restructure: "yes"
        # 使用国内镜像加速下载
        mirror: "https://mirrors.tuna.tsinghua.edu.cn/qt/"

    # 成功案例中的环境配置
    - name: Set up environment variables
      run: |
        # 使用从action中获取的实际路径
        echo "QT_DIR=/home/runner/Qt/$QT_VERSION/android_arm64_v8a" >> $GITHUB_ENV
        echo "ANDROID_NDK_ROOT=${{ steps.android-sdk.outputs.ndk-path }}" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=${{ steps.android-sdk.outputs.sdk-path }}" >> $GITHUB_ENV

        # 配置PATH
        echo "$QT_DIR/bin" >> $GITHUB_PATH

        # 关键：设置Qt配置需要的环境变量
        echo "ANDROID_MIN_SDK_VERSION=${{ env.ANDROID_API_LEVEL }}" >> $GITHUB_ENV
        echo "ANDROID_TARGET_SDK_VERSION=${{ env.ANDROID_API_LEVEL }}" >> $GITHUB_ENV
        echo "ANDROID_NDK_VERSION=${{ env.NDK_VERSION }}" >> $GITHUB_ENV
        echo "ANDROID_BUILD_TOOLS_VERSION=${{ env.BUILD_TOOLS_VERSION }}" >> $GITHUB_ENV

    # 验证安装
    - name: Verify Qt and Android tools
      run: |
        echo "Qt version:"
        qmake --version

        echo "Android NDK version:"
        $ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/clang --version

        echo "Android SDK tools:"
        $ANDROID_SDK_ROOT/tools/bin/sdkmanager --list | head -n 15

    # 成功的编译配置
    - name: Configure project
      run: |
        cd ${{ github.workspace }}

        # 使用更可靠的项目配置方式
        qmake Knot.pro \
          -spec android-clang \
          "CONFIG += release" \
          "ANDROID_ABIS = arm64-v8a" \
          "ANDROID_MIN_SDK_VERSION = $ANDROID_MIN_SDK_VERSION" \
          "ANDROID_TARGET_SDK_VERSION = $ANDROID_TARGET_SDK_VERSION" \
          "ANDROID_BUILD_TOOLS_VERSION = $ANDROID_BUILD_TOOLS_VERSION" \
          "ANDROID_NDK_VERSION = $ANDROID_NDK_VERSION"

    # 并行构建
    - name: Build Android APK
      run: |
        make -j$(nproc)
        make apk INSTALL_ROOT=build

        # 移动到标准位置
        mv build/android-build/build/outputs/apk/release/android-build-release-unsigned.apk \
           ${{ github.workspace }}/app-release-unsigned.apk

    # 签名APK（如果提供密钥）
    - name: Sign APK
      run: |
        # 检查所有必要secret是否存在
        if [ -z "$KEY_STORE_PASSWORD" ] || [ -z "$KEY_PASSWORD" ] || [ -z "$KEY_ALIAS" ]; then
          echo "::warning::Signing secrets not fully configured. Skipping APK signing."
          exit 0
        fi

        # 继续签名步骤
        jarsigner -verbose \
          -sigalg SHA256withRSA \
          -digestalg SHA-256 \
          -keystore android/app/my-release-key.keystore \
          -storepass "${{ secrets.KEY_STORE_PASSWORD }}" \
          -keypass "${{ secrets.KEY_PASSWORD }}" \
          ${{ github.workspace }}/app-release-unsigned.apk \
          "${{ secrets.KEY_ALIAS }}"

        $ANDROID_SDK_ROOT/build-tools/$ANDROID_BUILD_TOOLS_VERSION/zipalign -v 4 \
          ${{ github.workspace }}/app-release-unsigned.apk \
          ${{ github.workspace }}/app-release.apk
      env:
        KEY_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}

    # 上传APK
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: Android-APK
        path: |
          ${{ github.workspace }}/app-release-unsigned.apk
          ${{ github.workspace }}/app-release.apk
        if-no-files-found: error
