name: Qt6 Android CI

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  QT_VERSION: "6.6.3"
  QT_ARCH: "android_arm64_v8a"
  DESKTOP_ARCH: "win64_mingw"  # 桌面版依赖
  NDK_VERSION: "26.1.10909125"
  ANDROID_API_LEVEL: "34"
  JAVA_VERSION: "17"

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
        with:
          path: 'src'

      # 1. 安装JDK
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}

      # 2. 安装NDK
      - name: Install NDK
        run: |
          $ndkUrl = "https://dl.google.com/android/repository/android-ndk-r26b-windows.zip"
          Invoke-WebRequest -Uri $ndkUrl -OutFile "ndk.zip"
          Expand-Archive -Path "ndk.zip" -DestinationPath "android-sdk\ndk"
          Rename-Item -Path "android-sdk\ndk\android-ndk-r26b" -NewName $env:NDK_VERSION
          echo "ANDROID_NDK_ROOT=$env:GITHUB_WORKSPACE\android-sdk\ndk\$env:NDK_VERSION" >> $env:GITHUB_ENV
          echo "$env:ANDROID_NDK_ROOT\prebuilt\windows-x86_64\bin" >> $env:GITHUB_PATH

      # 3. 安装桌面版Qt（满足Android构建依赖）
      - name: Install Desktop Qt
        run: |
          python -m pip install --upgrade aqtinstall
          aqt install-qt windows desktop $env:QT_VERSION $env:DESKTOP_ARCH `
            -m qtcharts qtsensors qtwebview qtlocation qtwebchannel qt5compat qtpositioning `
            --outputdir "$env:GITHUB_WORKSPACE\Qt"

      # 4. 安装Android版Qt（使用默认配置）
      - name: Install Android Qt
        run: |
          aqt install-qt windows android $env:QT_VERSION $env:QT_ARCH `
            -m qtcharts qtsensors qtwebview qtlocation qtwebchannel qt5compat qtpositioning `
            --outputdir "$env:GITHUB_WORKSPACE\Qt"

      # 5. 构建项目（完全依赖Qt默认脚本）
      - name: Build
        shell: cmd
        run: |
            echo "=== 初始化环境 ==="
            set "QT_ROOT=%GITHUB_WORKSPACE%\Qt\%QT_VERSION%\%QT_ARCH%"
            set "DESKTOP_QT_ROOT=%GITHUB_WORKSPACE%\Qt\%QT_VERSION%\%DESKTOP_ARCH%"
            set "NDK_TOOLCHAIN=%ANDROID_NDK_ROOT%\toolchains\llvm\prebuilt\windows-x86_64\bin"

            REM 确保PATH只添加一次，避免重复和冲突
            set "PATH=%QT_ROOT%\bin;%DESKTOP_QT_ROOT%\bin;%ANDROID_NDK_ROOT%\prebuilt\windows-x86_64\bin;%NDK_TOOLCHAIN%;%PATH%"

            echo "=== 验证基本命令 ==="
            where cd
            where echo
            where set

            echo "=== 验证src目录 ==="
            if exist "%GITHUB_WORKSPACE%\src" (
              echo "src目录存在，尝试进入..."
              cd "%GITHUB_WORKSPACE%\src" || (echo "::error::无法进入src目录！" & exit 1)
            ) else (
              echo "::error::src目录不存在！"
              dir "%GITHUB_WORKSPACE%"
              exit 1
            )

            echo "=== 环境变量 ==="
            set

            echo "=== 验证NDK工具链 ==="
            where make.exe
            if errorlevel 1 (
              echo "::error::make.exe不在PATH中！"
              dir "%ANDROID_NDK_ROOT%\prebuilt\windows-x86_64\bin"
              exit 1
            )
            make --version

            echo "=== 验证编译器 ==="
            where clang++
            if errorlevel 1 (
              echo "::error::clang++不在PATH中！"
              dir "%NDK_TOOLCHAIN%"
              exit 1
            )
            clang++ --version

            echo "=== 生成Makefile ==="
            call qmake.bat Knot.pro -spec android-clang CONFIG+=release ANDROID_ABIS=arm64-v8a
            if errorlevel 1 (
                  echo "::error::qmake失败！"
                  exit 1
                )

            echo "=== 检查Makefile中的源文件 ==="
            type Makefile | findstr /C:"SOURCES ="  # 确认是否包含你的.cpp文件
            type Makefile | findstr /C:"OBJECTS ="  # 确认是否生成对应的.o目标文件

            echo "=== 执行make（带详细日志） ==="
            #"%ANDROID_NDK_ROOT%\prebuilt\windows-x86_64\bin\make.exe" -j8 V=1 > make_output.log 2>&1
            "%ANDROID_NDK_ROOT%\prebuilt\windows-x86_64\bin\make.exe" -j1 V=1  # 单线程执行，便于查看输出
            if errorlevel 1 (
              echo "::error::编译失败！"
              type make_full.log
              exit 1
            )

            echo "=== 检查编译产物 ==="
            dir /s *.so

            echo "=== 生成APK ==="
            androiddeployqt.exe ^
              --input android-libKnot.so-deployment-settings.json ^
              --output build/android-build ^
              --android-platform android-%ANDROID_API_LEVEL% ^
              --jdk "%JAVA_HOME%" ^
              --gradle --release
            if errorlevel 1 exit 1

      # 6. 上传产物
      - name: Upload APK
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: Knot-APK
          path: build\android-build\build\outputs\apk\release\*.apk
