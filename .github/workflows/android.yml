name: Build Android APK

on:
  push:
    branches: [ main ]
    paths:
      - '**'
      - '!stats.txt'
      - '!README.md'
  pull_request:
    branches: [ main ]

env:
  QT_VERSION: 6.5.3
  ANDROID_API_LEVEL: 34
  BUILD_TOOLS_VERSION: 34.0.0
  NDK_VERSION: 25.1.8937393  # 6.5.3官方推荐的NDK版本
  QT_ARCH: android_arm64_v8a
  REPO_ROOT: ${{ github.workspace }}
  QT_INSTALL_DIR: ${{ github.workspace }}\QtAndroid

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: 'temurin'

    - name: Setup Android SDK and NDK
      uses: android-actions/setup-android@v3
      id: android-setup
      with:
        ndk-version: ${{ env.NDK_VERSION }}
        sdk-version: ${{ env.ANDROID_API_LEVEL }}

    - name: 确保安装目录存在
      shell: cmd
      run: |
        if not exist "${{ env.QT_INSTALL_DIR }}" (
          mkdir "${{ env.QT_INSTALL_DIR }}"
          echo "创建Qt安装目录成功"
        )

    - name: Install Qt Android（修复参数）
      uses: jurplel/install-qt-action@v4
      id: qt-android
      with:
        version: ${{ env.QT_VERSION }}
        target: android
        arch: ${{ env.QT_ARCH }}
        modules: qtcharts qtsensors qtlocation qtpositioning
        install-dir: ${{ env.QT_INSTALL_DIR }}
        install-deps: true
        logging: true
        android: true  # 明确指定为Android构建
        # 移除错误的 tools: qttools 参数

    - name: 验证Qt安装目录内容
      shell: cmd
      run: |
        echo "Qt安装目录内容："
        dir "${{ env.QT_INSTALL_DIR }}\${{ env.QT_VERSION }}" /s /b

    - name: 手动设置Qt路径（Android专用）
      shell: cmd
      run: |
        rem 注意：Android版本的qmake路径格式不同
        set QT_ROOT=${{ env.QT_INSTALL_DIR }}\${{ env.QT_VERSION }}\${{ env.QT_ARCH }}
        echo QT_ROOT=%QT_ROOT% >> %GITHUB_ENV%
        echo Qt6_DIR=%QT_ROOT% >> %GITHUB_ENV%
        echo PATH=%QT_ROOT%\bin;%PATH% >> %GITHUB_ENV%  # 尝试添加默认路径

        rem 对于Android，还需要设置工具链路径
        set ANDROID_TOOLCHAIN=%ANDROID_NDK_ROOT%\toolchains\llvm\prebuilt\windows-x86_64\bin
        echo ANDROID_TOOLCHAIN=%ANDROID_TOOLCHAIN% >> %GITHUB_ENV%
        echo PATH=%ANDROID_TOOLCHAIN%;%PATH% >> %GITHUB_ENV%

    - name: 查找并验证qmake（Android专用）
      shell: cmd
      run: |
        echo "查找qmake位置..."
        where qmake.exe || echo "未在PATH中找到qmake，尝试直接定位"

        rem 尝试直接定位qmake（Android版本可能在不同位置）
        set QMAKE_PATH=${{ env.QT_INSTALL_DIR }}\${{ env.QT_VERSION }}\${{ env.QT_ARCH }}\bin\qmake.exe
        if exist "%QMAKE_PATH%" (
          echo "找到qmake：%QMAKE_PATH%"
          "%QMAKE_PATH%" --version
          echo "QMAKE=%QMAKE_PATH%" >> %GITHUB_ENV%  # 保存qmake路径供后续使用
        ) else (
          echo "##[error]未找到qmake！检查Qt安装是否完整"
          exit 1
        )

    - name: Generate Makefile（使用绝对路径调用qmake）
      shell: cmd
      run: |
        cd /d %REPO_ROOT%

        if not exist "Knot.pro" (
          echo "##[error]Knot.pro 文件未找到！"
          dir /b *.pro
          exit 1
        )

        rem 使用保存的QMAKE路径（避免PATH问题）
        "%QMAKE%" "Knot.pro" ^
              -spec android-clang ^
              "CONFIG += thread c++17 release" ^
              "ANDROID_NDK_ROOT=%ANDROID_NDK_ROOT%" ^
              ANDROID_ABIS=arm64-v8a

    # 后续步骤保持不变...
    - name: Build APK
      shell: cmd
      run: |
        "%NDK_MAKE%" -j8
        "%NDK_MAKE%" apk

    - name: Sign APK
      shell: cmd
      run: |
        jarsigner -verbose ^
          -sigalg SHA256withRSA ^
          -digestalg SHA-256 ^
          -keystore android/app/my-release-key.keystore ^
          -storepass ${{ secrets.KEY_STORE_PASSWORD }} ^
          -keypass ${{ secrets.KEY_PASSWORD }} ^
          build\android-build-release-unsigned.apk ^
          ${{ secrets.KEY_ALIAS }}

        "%ANDROID_SDK_ROOT%\build-tools\%BUILD_TOOLS_VERSION%\zipalign" -v 4 ^
          build\android-build-release-unsigned.apk ^
          Knot6-release.apk

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: Android-APK
        path: Knot6-release.apk
