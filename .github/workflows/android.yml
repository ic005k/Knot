name: Build Android APK

on:
  push:
    branches: [ main ]
    paths:
      - '**'
      - '!stats.txt'
      - '!README.md'
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      QT_VERSION: "6.6.3"
      QT_ARCH: "android_arm64_v8a"
      ANDROID_API_LEVEL: "34"
      # 关键修改：使用系统中已存在的NDK版本（26系列最新版）
      NDK_VERSION: "26.3.11579264"
      BUILD_TOOLS_VERSION: "34.0.0"
      # Android SDK在GitHub Actions中的默认路径
      ANDROID_SDK_DEFAULT_PATH: "/usr/local/lib/android/sdk"
      NDK_BASE_PATH: "/usr/local/lib/android/sdk/ndk"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # 使用特定版本JDK
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # 配置Android SDK和NDK（使用存在的NDK版本）
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      id: android-sdk
      with:
        ndk-version: ${{ env.NDK_VERSION }}  # 现在使用存在的版本
        sdk-version: ${{ env.ANDROID_API_LEVEL }}

    # 调试：确认NDK和SDK安装状态
    - name: Debug Android environment
      run: |
        echo "Requested NDK version: ${{ env.NDK_VERSION }}"
        echo "NDK path from action: ${{ steps.android-sdk.outputs.ndk-path }}"
        echo "SDK path from action: ${{ steps.android-sdk.outputs.sdk-path }}"
        echo "Available NDK versions:"
        ls -la ${{ env.NDK_BASE_PATH }}

    # 安装Qt for Android
    - name: Install Qt for Android
      uses: jurplel/install-qt-action@v4
      with:
        version: ${{ env.QT_VERSION }}
        target: android
        arch: ${{ env.QT_ARCH }}
        modules: qt5compat qtcharts qtsensors qtlocation qtpositioning qtwebview
        install-deps: true
        aqt-installer-option: "--outputdir /home/runner/Qt"
        archive-folder-restructure: "yes"
        mirror: "https://mirrors.tuna.tsinghua.edu.cn/qt/"

    # 设置环境变量（优先使用action输出，否则用默认路径）
    - name: Set up environment variables
      run: |
        # 配置NDK路径（使用存在的版本）
        echo "ANDROID_NDK_ROOT=${{ steps.android-sdk.outputs.ndk-path || env.NDK_BASE_PATH }}/${{ env.NDK_VERSION }}" >> $GITHUB_ENV

        # 配置SDK路径（优先用action输出，否则用默认路径）
        if [ -n "${{ steps.android-sdk.outputs.sdk-path }}" ]; then
          echo "ANDROID_SDK_ROOT=${{ steps.android-sdk.outputs.sdk-path }}" >> $GITHUB_ENV
        else
          echo "ANDROID_SDK_ROOT=${{ env.ANDROID_SDK_DEFAULT_PATH }}" >> $GITHUB_ENV
        fi

        # 配置Qt路径
        echo "QT_DIR=/home/runner/Qt/$QT_VERSION/android_arm64_v8a" >> $GITHUB_ENV
        echo "$QT_DIR/bin" >> $GITHUB_PATH

        # 配置Android构建参数
        echo "ANDROID_MIN_SDK_VERSION=${{ env.ANDROID_API_LEVEL }}" >> $GITHUB_ENV
        echo "ANDROID_TARGET_SDK_VERSION=${{ env.ANDROID_API_LEVEL }}" >> $GITHUB_ENV
        echo "ANDROID_NDK_VERSION=${{ env.NDK_VERSION }}" >> $GITHUB_ENV
        echo "ANDROID_BUILD_TOOLS_VERSION=${{ env.BUILD_TOOLS_VERSION }}" >> $GITHUB_ENV

    # 验证关键路径是否存在
    - name: Verify environment
      run: |
        echo "Qt version:"
        qmake --version

        echo "Android NDK path: $ANDROID_NDK_ROOT"
        echo "Android SDK path: $ANDROID_SDK_ROOT"

        # 验证NDK存在
        if [ -d "$ANDROID_NDK_ROOT" ]; then
          echo "✅ NDK found at $ANDROID_NDK_ROOT"
        else
          echo "❌ NDK not found at $ANDROID_NDK_ROOT"
          exit 1
        fi

        # 验证SDK存在
        if [ -d "$ANDROID_SDK_ROOT" ]; then
          echo "✅ SDK found at $ANDROID_SDK_ROOT"
        else
          echo "❌ SDK not found at $ANDROID_SDK_ROOT"
          exit 1
        fi

        # 验证Qt配置文件存在
        if [ -f "$QT_DIR/mkspecs/android-clang/qmake.conf" ]; then
          echo "✅ Qt Android mkspec found"
        else
          echo "❌ Qt Android mkspec not found"
          exit 1
        fi

    # 配置项目
    - name: Configure project
      run: |
        cd ${{ github.workspace }}
        qmake Knot.pro \
          -spec android-clang \
          "CONFIG+=release" \
          "ANDROID_ABIS=arm64-v8a" \
          "ANDROID_MIN_SDK_VERSION=$ANDROID_MIN_SDK_VERSION" \
          "ANDROID_TARGET_SDK_VERSION=$ANDROID_TARGET_SDK_VERSION" \
          "ANDROID_BUILD_TOOLS_VERSION=$ANDROID_BUILD_TOOLS_VERSION" \
          "ANDROID_NDK_VERSION=$ANDROID_NDK_VERSION"

    # 构建APK
    - name: Build Android APK
      run: |
        make -j$(nproc)
        make apk INSTALL_ROOT=build
        mkdir -p ${{ github.workspace }}/output
        mv build/android-build/build/outputs/apk/release/android-build-release-unsigned.apk \
           ${{ github.workspace }}/output/app-release-unsigned.apk

    # 签名APK（如配置了密钥）
    - name: Sign APK
      run: |
        if [ -z "$KEY_STORE_PASSWORD" ] || [ -z "$KEY_PASSWORD" ] || [ -z "$KEY_ALIAS" ]; then
          echo "::warning::Signing secrets not configured. Skipping signing."
          exit 0
        fi
        jarsigner -verbose \
          -sigalg SHA256withRSA \
          -digestalg SHA-256 \
          -keystore android/app/my-release-key.keystore \
          -storepass "${{ secrets.KEY_STORE_PASSWORD }}" \
          -keypass "${{ secrets.KEY_PASSWORD }}" \
          ${{ github.workspace }}/output/app-release-unsigned.apk \
          "${{ secrets.KEY_ALIAS }}"
        $ANDROID_SDK_ROOT/build-tools/$ANDROID_BUILD_TOOLS_VERSION/zipalign -v 4 \
          ${{ github.workspace }}/output/app-release-unsigned.apk \
          ${{ github.workspace }}/output/app-release.apk
      env:
        KEY_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}

    # 上传APK
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: Android-APK
        path: ${{ github.workspace }}/output/*
        if-no-files-found: error
