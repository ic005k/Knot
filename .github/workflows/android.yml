name: Qt6 Android CI

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  QT_VERSION: "6.6.3"
  QT_ARCH: "android_arm64_v8a"
  DESKTOP_ARCH: "win64_mingw"  # 桌面版依赖
  NDK_VERSION: "26.1.10909125"
  ANDROID_API_LEVEL: "34"
  JAVA_VERSION: "17"

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
        with:
          path: 'src'

      # 1. 安装JDK
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}

      # 2. 安装NDK
      - name: Install NDK
        run: |
          $ndkUrl = "https://dl.google.com/android/repository/android-ndk-r26b-windows.zip"
          Invoke-WebRequest -Uri $ndkUrl -OutFile "ndk.zip"
          Expand-Archive -Path "ndk.zip" -DestinationPath "android-sdk\ndk"
          Rename-Item -Path "android-sdk\ndk\android-ndk-r26b" -NewName $env:NDK_VERSION
          echo "ANDROID_NDK_ROOT=$env:GITHUB_WORKSPACE\android-sdk\ndk\$env:NDK_VERSION" >> $env:GITHUB_ENV
          echo "$env:ANDROID_NDK_ROOT\prebuilt\windows-x86_64\bin" >> $env:GITHUB_PATH

      # 3. 安装桌面版Qt（满足Android构建依赖）
      - name: Install Desktop Qt
        run: |
          python -m pip install --upgrade aqtinstall
          aqt install-qt windows desktop $env:QT_VERSION $env:DESKTOP_ARCH `
            -m qtcharts qtsensors qtwebview qtlocation qtwebchannel qt5compat qtpositioning `
            --outputdir "$env:GITHUB_WORKSPACE\Qt"

      # 4. 安装Android版Qt（使用默认配置）
      - name: Install Android Qt
        run: |
          aqt install-qt windows android $env:QT_VERSION $env:QT_ARCH `
            -m qtcharts qtsensors qtwebview qtlocation qtwebchannel qt5compat qtpositioning `
            --outputdir "$env:GITHUB_WORKSPACE\Qt"

      # 5. 构建项目（完全依赖Qt默认脚本）
      - name: Build
        shell: cmd
        run: |
                  set QT_ROOT=%GITHUB_WORKSPACE%\Qt\%QT_VERSION%\%QT_ARCH%
                  set DESKTOP_QT_ROOT=%GITHUB_WORKSPACE%\Qt\%QT_VERSION%\%DESKTOP_ARCH%
                  set PATH=%QT_ROOT%\bin;%DESKTOP_QT_ROOT%\bin;%ANDROID_NDK_ROOT%\prebuilt\windows-x86_64\bin;%PATH%

                  echo "=== 进入代码目录 ==="
                  cd src

                  echo "=== 生成Makefile（同本地qmake命令） ==="
                  qmake.bat ..\Knot.pro -spec android-clang CONFIG+=release ANDROID_ABIS=arm64-v8a
                  if errorlevel 1 exit 1

                  echo "=== 编译（使用NDK中的make，同本地） ==="
                  make -j %NUMBER_OF_PROCESSORS%  # 本地日志中明确使用NDK的make.exe
                  if errorlevel 1 exit 1

                  echo "=== 安装到临时目录（匹配本地INSTALL_ROOT） ==="
                  make install INSTALL_ROOT=build
                  if errorlevel 1 exit 1

                  echo "=== 生成APK（使用Qt的androiddeployqt，同本地） ==="
                  androiddeployqt.exe ^
                    --input %GITHUB_WORKSPACE%\src\android-Knot-deployment-settings.json ^
                    --output %GITHUB_WORKSPACE%\src\build\android-build ^
                    --android-platform android-%ANDROID_API_LEVEL% ^
                    --jdk %JAVA_HOME% ^
                    --gradle --release  # 本地日志中使用--gradle打包
                  if errorlevel 1 exit 1

      # 6. 上传产物
      - name: Upload APK
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: Knot-APK
          path: build\android-build\build\outputs\apk\release\*.apk
