name: Build Android APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  QT_VERSION: 6.6.3
  ANDROID_API_LEVEL: 34
  BUILD_TOOLS_VERSION: 34.0.0
  NDK_VERSION: 25.1.8937393
  QT_DESKTOP_ARCH: gcc_64  # 桌面工具链架构
  QT_ARCH: android_arm64_v8a 

jobs:
  build:
    #os: [ubuntu-22.04]
    runs-on: windows-latest #ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: 'temurin'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Install Android components
      shell: cmd  # 强制使用 CMD 而非 PowerShell
      run: |
        @echo off
        echo Accepting licenses...
        echo y | sdkmanager --licenses
        sdkmanager "platforms;android-%ANDROID_API_LEVEL%" ^
        "build-tools;%BUILD_TOOLS_VERSION%" ^
        "ndk;%NDK_VERSION%" ^
        "cmdline-tools;latest"

    # 设置 Python 环境
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    # 安装 aqtinstall 并配置 PATH
    - name: Install aqtinstall
      run: |
        pip install aqtinstall
        echo "$HOME/.local/bin" >> $GITHUB_PATH  # 关键：确保后续步骤能找到 aqt

     # 使用 aqtinstall 安装 Qt（含安卓模块）
     - name: Install Qt for Android
       shell: cmd  # 强制使用 CMD 解释器
       run: |
         aqt install-qt ^
           windows ^
           desktop ^
           %QT_VERSION% ^
           win64 ^  # Windows 桌面版架构固定为 win64
           --outputdir "%GITHUB_WORKSPACE%\Qt" ^
           --modules qtcharts qtsensors qtlocation qt5compat qtpositioning

          #aqt install-qt linux desktop $QT_VERSION $QT_ARCH --outputdir /Qt --modules qtcharts qtsvg qtsensors qtlocation qt5compat qtpositioning

        # 安装安卓基础组件
          aqt install-qt ^
            windows ^
            android ^
            %QT_VERSION% ^
            win64 ^
            --outputdir "%GITHUB_WORKSPACE%\Qt" ^
            --modules qtcharts qtsensors qtlocation qt5compat qtpositioning

        
    - name: Setup Android environment variables
      shell: bash
      run: |
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk/${{ env.NDK_VERSION }}" >> $GITHUB_ENV
        echo "QT_DIR=${{ github.workspace }}/Qt/${{ env.QT_VERSION }}/android_arm64_v8a" >> $GITHUB_ENV
        echo "PATH=$QT_DIR/bin:$PATH" >> $GITHUB_ENV  # 将qmake加入PATH

    - name: Prepare signing
      run: |
        mkdir -p android/app
        echo "${{ secrets.SIGNING_KEY }}" > android/app/my-release-key.keystore.base64
        base64 -d android/app/my-release-key.keystore.base64 > android/app/my-release-key.keystore

    - name: Build APK
      run: |

        # 确保 qmake 可用
        export PATH="${{ env.QT_DIR }}/bin:$PATH"
        mkdir build && cd build

        $QT_DIR/bin/qmake .. CONFIG+=release ANDROID_ABIS=arm64-v8a
        make -j$(nproc)
        make apk


    - name: Sign APK
      run: |
        jarsigner -verbose \
          -sigalg SHA256withRSA \
          -digestalg SHA-256 \
          -keystore android/app/my-release-key.keystore \
          -storepass ${{ secrets.KEY_STORE_PASSWORD }} \
          -keypass ${{ secrets.KEY_PASSWORD }} \
          build/android-build/build/outputs/apk/release/android-build-release-unsigned.apk \
          ${{ secrets.KEY_ALIAS }}

        $ANDROID_SDK_ROOT/build-tools/${{ env.BUILD_TOOLS_VERSION }}/zipalign -v 4 \
          build/android-build/build/outputs/apk/release/android-build-release-unsigned.apk \
          MyApp-release.apk

    - name: Upload artifact
      uses: actions/upload-artifact@v4  # 更新到v4版本
      with:
        name: Android-APK
        path: MyApp-release.apk
