import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "qwaylandclient.h"
        name: "QWaylandClient"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: [
            "QtWayland.Compositor/WaylandClient 1.0",
            "QtWayland.Compositor/WaylandClient 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [256, 1536]
        Property {
            name: "compositor"
            type: "QWaylandCompositor"
            isPointer: true
            read: "compositor"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "userId"
            type: "qlonglong"
            read: "userId"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "groupId"
            type: "qlonglong"
            read: "groupId"
            index: 2
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "processId"
            type: "qlonglong"
            read: "processId"
            index: 3
            isReadonly: true
            isConstant: true
        }
        Method { name: "close" }
        Method {
            name: "kill"
            Parameter { name: "signal"; type: "int" }
        }
        Method { name: "kill"; isCloned: true }
    }
    Component {
        file: "qwaylandcompositor.h"
        name: "QWaylandCompositor"
        accessSemantics: "reference"
        prototype: "QWaylandObject"
        exports: [
            "QtWayland.Compositor/WaylandCompositorBase 1.0",
            "QtWayland.Compositor/WaylandCompositorBase 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [256, 1536]
        Enum {
            name: "ShmFormat"
            values: [
                "ShmFormat_ARGB8888",
                "ShmFormat_XRGB8888",
                "ShmFormat_C8",
                "ShmFormat_XRGB4444",
                "ShmFormat_ARGB4444",
                "ShmFormat_XRGB1555",
                "ShmFormat_RGB565",
                "ShmFormat_RGB888",
                "ShmFormat_XBGR8888",
                "ShmFormat_ABGR8888",
                "ShmFormat_BGR888",
                "ShmFormat_XRGB2101010",
                "ShmFormat_XBGR2101010",
                "ShmFormat_ARGB2101010",
                "ShmFormat_ABGR2101010"
            ]
        }
        Property {
            name: "socketName"
            type: "QByteArray"
            read: "socketName"
            write: "setSocketName"
            notify: "socketNameChanged"
            index: 0
        }
        Property {
            name: "created"
            type: "bool"
            read: "isCreated"
            notify: "createdChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "retainedSelection"
            type: "bool"
            read: "retainedSelectionEnabled"
            write: "setRetainedSelectionEnabled"
            notify: "retainedSelectionChanged"
            index: 2
        }
        Property {
            name: "defaultOutput"
            type: "QWaylandOutput"
            isPointer: true
            read: "defaultOutput"
            write: "setDefaultOutput"
            notify: "defaultOutputChanged"
            index: 3
        }
        Property {
            name: "useHardwareIntegrationExtension"
            type: "bool"
            read: "useHardwareIntegrationExtension"
            write: "setUseHardwareIntegrationExtension"
            notify: "useHardwareIntegrationExtensionChanged"
            index: 4
        }
        Property {
            name: "defaultSeat"
            type: "QWaylandSeat"
            isPointer: true
            read: "defaultSeat"
            notify: "defaultSeatChanged"
            index: 5
            isReadonly: true
        }
        Property {
            name: "additionalShmFormats"
            revision: 1536
            type: "ShmFormat"
            isList: true
            read: "additionalShmFormats"
            write: "setAdditionalShmFormats"
            notify: "additionalShmFormatsChanged"
            index: 6
        }
        Signal { name: "createdChanged" }
        Signal {
            name: "socketNameChanged"
            Parameter { name: "socketName"; type: "QByteArray" }
        }
        Signal {
            name: "retainedSelectionChanged"
            Parameter { name: "retainedSelection"; type: "bool" }
        }
        Signal {
            name: "surfaceRequested"
            Parameter { name: "client"; type: "QWaylandClient"; isPointer: true }
            Parameter { name: "id"; type: "uint" }
            Parameter { name: "version"; type: "int" }
        }
        Signal {
            name: "surfaceCreated"
            Parameter { name: "surface"; type: "QWaylandSurface"; isPointer: true }
        }
        Signal {
            name: "surfaceAboutToBeDestroyed"
            Parameter { name: "surface"; type: "QWaylandSurface"; isPointer: true }
        }
        Signal {
            name: "subsurfaceChanged"
            Parameter { name: "child"; type: "QWaylandSurface"; isPointer: true }
            Parameter { name: "parent"; type: "QWaylandSurface"; isPointer: true }
        }
        Signal { name: "defaultOutputChanged" }
        Signal {
            name: "defaultSeatChanged"
            Parameter { name: "newDevice"; type: "QWaylandSeat"; isPointer: true }
            Parameter { name: "oldDevice"; type: "QWaylandSeat"; isPointer: true }
        }
        Signal { name: "useHardwareIntegrationExtensionChanged" }
        Signal {
            name: "outputAdded"
            Parameter { name: "output"; type: "QWaylandOutput"; isPointer: true }
        }
        Signal {
            name: "outputRemoved"
            Parameter { name: "output"; type: "QWaylandOutput"; isPointer: true }
        }
        Signal { name: "additionalShmFormatsChanged" }
        Method { name: "processWaylandEvents" }
        Method {
            name: "applicationStateChanged"
            Parameter { name: "state"; type: "Qt::ApplicationState" }
        }
        Method {
            name: "addSocketDescriptor"
            Parameter { name: "fd"; type: "int" }
        }
        Method {
            name: "destroyClientForSurface"
            Parameter { name: "surface"; type: "QWaylandSurface"; isPointer: true }
        }
        Method {
            name: "destroyClient"
            Parameter { name: "client"; type: "QWaylandClient"; isPointer: true }
        }
        Method {
            name: "outputFor"
            type: "QWaylandOutput"
            isPointer: true
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
        }
    }
    Component {
        file: "qwaylandcompositorextension.h"
        name: "QWaylandCompositorExtension"
        accessSemantics: "reference"
        prototype: "QWaylandObject"
        exports: [
            "QtWayland.Compositor/WaylandExtension 1.0",
            "QtWayland.Compositor/WaylandExtension 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [256, 1536]
    }
    Component {
        file: "qwaylanddrag.h"
        name: "QWaylandDrag"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: [
            "QtWayland.Compositor/WaylandDrag 1.0",
            "QtWayland.Compositor/WaylandDrag 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [256, 1536]
        Property {
            name: "icon"
            type: "QWaylandSurface"
            isPointer: true
            read: "icon"
            notify: "iconChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "visible"
            type: "bool"
            read: "visible"
            notify: "iconChanged"
            index: 1
            isReadonly: true
        }
        Signal { name: "iconChanged" }
        Signal { name: "dragStarted" }
        Method {
            name: "dragMove"
            Parameter { name: "target"; type: "QWaylandSurface"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Method { name: "drop" }
        Method { name: "cancelDrag" }
    }
    Component {
        file: "qwaylandidleinhibitv1.h"
        name: "QWaylandIdleInhibitManagerV1"
        accessSemantics: "reference"
    }
    Component {
        file: "private/qwaylandcompositorquickextensions_p.h"
        name: "QWaylandIdleInhibitManagerV1QuickExtension"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QWaylandIdleInhibitManagerV1"
        interfaces: ["QQmlParserStatus"]
        exports: [
            "QtWayland.Compositor/IdleInhibitManagerV1 1.0",
            "QtWayland.Compositor/IdleInhibitManagerV1 6.0"
        ]
        exportMetaObjectRevisions: [256, 1536]
        Property { name: "data"; type: "QObject"; isList: true; read: "data"; index: 0; isReadonly: true }
    }
    Component {
        file: "qwaylandkeymap.h"
        name: "QWaylandKeymap"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QObject"
        exports: [
            "QtWayland.Compositor/WaylandKeymap 1.0",
            "QtWayland.Compositor/WaylandKeymap 6.0"
        ]
        exportMetaObjectRevisions: [256, 1536]
        Property { name: "data"; type: "QObject"; isList: true; read: "data"; index: 0; isReadonly: true }
        Property {
            name: "layout"
            type: "QString"
            read: "layout"
            write: "setLayout"
            notify: "layoutChanged"
            index: 1
        }
        Property {
            name: "variant"
            type: "QString"
            read: "variant"
            write: "setVariant"
            notify: "variantChanged"
            index: 2
        }
        Property {
            name: "options"
            type: "QString"
            read: "options"
            write: "setOptions"
            notify: "optionsChanged"
            index: 3
        }
        Property {
            name: "rules"
            type: "QString"
            read: "rules"
            write: "setRules"
            notify: "rulesChanged"
            index: 4
        }
        Property {
            name: "model"
            type: "QString"
            read: "model"
            write: "setModel"
            notify: "modelChanged"
            index: 5
        }
        Signal { name: "layoutChanged" }
        Signal { name: "variantChanged" }
        Signal { name: "optionsChanged" }
        Signal { name: "rulesChanged" }
        Signal { name: "modelChanged" }
    }
    Component {
        file: "private/qwaylandmousetracker_p.h"
        name: "QWaylandMouseTracker"
        accessSemantics: "reference"
        defaultProperty: "data"
        parentProperty: "parent"
        prototype: "QQuickItem"
        exports: [
            "QtWayland.Compositor/WaylandMouseTracker 1.0",
            "QtWayland.Compositor/WaylandMouseTracker 2.0",
            "QtWayland.Compositor/WaylandMouseTracker 2.1",
            "QtWayland.Compositor/WaylandMouseTracker 2.4",
            "QtWayland.Compositor/WaylandMouseTracker 2.7",
            "QtWayland.Compositor/WaylandMouseTracker 2.11",
            "QtWayland.Compositor/WaylandMouseTracker 6.0",
            "QtWayland.Compositor/WaylandMouseTracker 6.3"
        ]
        exportMetaObjectRevisions: [256, 512, 513, 516, 519, 523, 1536, 1539]
        Property {
            name: "mouseX"
            type: "double"
            read: "mouseX"
            notify: "mouseXChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "mouseY"
            type: "double"
            read: "mouseY"
            notify: "mouseYChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "containsMouse"
            type: "bool"
            read: "hovered"
            notify: "hoveredChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "windowSystemCursorEnabled"
            type: "bool"
            read: "windowSystemCursorEnabled"
            write: "setWindowSystemCursorEnabled"
            notify: "windowSystemCursorEnabledChanged"
            index: 3
        }
        Signal { name: "mouseXChanged" }
        Signal { name: "mouseYChanged" }
        Signal { name: "windowSystemCursorEnabledChanged" }
        Signal { name: "hoveredChanged" }
    }
    Component {
        file: "qwaylandcompositorextension.h"
        name: "QWaylandObject"
        accessSemantics: "reference"
        prototype: "QObject"
    }
    Component {
        file: "qwaylandoutput.h"
        name: "QWaylandOutput"
        accessSemantics: "reference"
        prototype: "QWaylandObject"
        exports: [
            "QtWayland.Compositor/WaylandOutputBase 1.0",
            "QtWayland.Compositor/WaylandOutputBase 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [256, 1536]
        Enum {
            name: "Subpixel"
            values: [
                "SubpixelUnknown",
                "SubpixelNone",
                "SubpixelHorizontalRgb",
                "SubpixelHorizontalBgr",
                "SubpixelVerticalRgb",
                "SubpixelVerticalBgr"
            ]
        }
        Enum {
            name: "Transform"
            values: [
                "TransformNormal",
                "Transform90",
                "Transform180",
                "Transform270",
                "TransformFlipped",
                "TransformFlipped90",
                "TransformFlipped180",
                "TransformFlipped270"
            ]
        }
        Property {
            name: "compositor"
            type: "QWaylandCompositor"
            isPointer: true
            read: "compositor"
            write: "setCompositor"
            notify: "compositorChanged"
            index: 0
        }
        Property {
            name: "window"
            type: "QWindow"
            isPointer: true
            read: "window"
            write: "setWindow"
            notify: "windowChanged"
            index: 1
        }
        Property {
            name: "manufacturer"
            type: "QString"
            read: "manufacturer"
            write: "setManufacturer"
            notify: "manufacturerChanged"
            index: 2
        }
        Property {
            name: "model"
            type: "QString"
            read: "model"
            write: "setModel"
            notify: "modelChanged"
            index: 3
        }
        Property {
            name: "position"
            type: "QPoint"
            read: "position"
            write: "setPosition"
            notify: "positionChanged"
            index: 4
        }
        Property {
            name: "geometry"
            type: "QRect"
            read: "geometry"
            notify: "geometryChanged"
            index: 5
            isReadonly: true
        }
        Property {
            name: "availableGeometry"
            type: "QRect"
            read: "availableGeometry"
            write: "setAvailableGeometry"
            notify: "availableGeometryChanged"
            index: 6
        }
        Property {
            name: "physicalSize"
            type: "QSize"
            read: "physicalSize"
            write: "setPhysicalSize"
            notify: "physicalSizeChanged"
            index: 7
        }
        Property {
            name: "subpixel"
            type: "QWaylandOutput::Subpixel"
            read: "subpixel"
            write: "setSubpixel"
            notify: "subpixelChanged"
            index: 8
        }
        Property {
            name: "transform"
            type: "QWaylandOutput::Transform"
            read: "transform"
            write: "setTransform"
            notify: "transformChanged"
            index: 9
        }
        Property {
            name: "scaleFactor"
            type: "int"
            read: "scaleFactor"
            write: "setScaleFactor"
            notify: "scaleFactorChanged"
            index: 10
        }
        Property {
            name: "sizeFollowsWindow"
            type: "bool"
            read: "sizeFollowsWindow"
            write: "setSizeFollowsWindow"
            notify: "sizeFollowsWindowChanged"
            index: 11
        }
        Signal { name: "compositorChanged" }
        Signal { name: "windowChanged" }
        Signal { name: "positionChanged" }
        Signal { name: "geometryChanged" }
        Signal { name: "modeAdded" }
        Signal { name: "currentModeChanged" }
        Signal { name: "availableGeometryChanged" }
        Signal { name: "physicalSizeChanged" }
        Signal { name: "scaleFactorChanged" }
        Signal { name: "subpixelChanged" }
        Signal { name: "transformChanged" }
        Signal { name: "sizeFollowsWindowChanged" }
        Signal { name: "physicalSizeFollowsSizeChanged" }
        Signal { name: "manufacturerChanged" }
        Signal { name: "modelChanged" }
        Signal { name: "windowDestroyed" }
        Method { name: "_q_handleMaybeWindowPixelSizeChanged" }
        Method { name: "_q_handleWindowDestroyed" }
    }
    Component {
        file: "qwaylandqttextinputmethodmanager.h"
        name: "QWaylandQtTextInputMethodManager"
        accessSemantics: "reference"
    }
    Component {
        file: "private/qwaylandcompositorquickextensions_p.h"
        name: "QWaylandQtTextInputMethodManagerQuickExtension"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QWaylandQtTextInputMethodManager"
        interfaces: ["QQmlParserStatus"]
        exports: [
            "QtWayland.Compositor/QtTextInputMethodManager 1.0",
            "QtWayland.Compositor/QtTextInputMethodManager 6.0"
        ]
        exportMetaObjectRevisions: [256, 1536]
        Property { name: "data"; type: "QObject"; isList: true; read: "data"; index: 0; isReadonly: true }
    }
    Component {
        file: "qwaylandqtwindowmanager.h"
        name: "QWaylandQtWindowManager"
        accessSemantics: "reference"
        Property {
            name: "showIsFullScreen"
            type: "bool"
            read: "showIsFullScreen"
            write: "setShowIsFullScreen"
            notify: "showIsFullScreenChanged"
            index: 0
        }
        Signal { name: "showIsFullScreenChanged" }
        Signal {
            name: "openUrl"
            Parameter { name: "client"; type: "QWaylandClient"; isPointer: true }
            Parameter { name: "url"; type: "QUrl" }
        }
    }
    Component {
        file: "private/qwaylandcompositorquickextensions_p.h"
        name: "QWaylandQtWindowManagerQuickExtension"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QWaylandQtWindowManager"
        interfaces: ["QQmlParserStatus"]
        exports: [
            "QtWayland.Compositor/QtWindowManager 1.0",
            "QtWayland.Compositor/QtWindowManager 6.0"
        ]
        exportMetaObjectRevisions: [256, 1536]
        Property { name: "data"; type: "QObject"; isList: true; read: "data"; index: 0; isReadonly: true }
    }
    Component {
        file: "qwaylandquickcompositor.h"
        name: "QWaylandQuickCompositor"
        accessSemantics: "reference"
        prototype: "QWaylandCompositor"
        interfaces: ["QQmlParserStatus"]
    }
    Component {
        file: "private/qwaylandcompositorquickextensions_p.h"
        name: "QWaylandQuickCompositorQuickExtensionContainer"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QWaylandQuickCompositor"
        exports: [
            "QtWayland.Compositor/WaylandCompositor 1.0",
            "QtWayland.Compositor/WaylandCompositor 6.0"
        ]
        exportMetaObjectRevisions: [256, 1536]
        Property {
            name: "extensions"
            type: "QWaylandCompositorExtension"
            isList: true
            read: "extensions"
            index: 0
            isReadonly: true
        }
        Property { name: "data"; type: "QObject"; isList: true; read: "data"; index: 1; isReadonly: true }
    }
    Component {
        file: "private/qwaylandquickhardwarelayer_p.h"
        name: "QWaylandQuickHardwareLayer"
        accessSemantics: "reference"
        prototype: "QObject"
        interfaces: ["QQmlParserStatus"]
        exports: [
            "QtWayland.Compositor/WaylandHardwareLayer 1.2",
            "QtWayland.Compositor/WaylandHardwareLayer 6.0"
        ]
        exportMetaObjectRevisions: [258, 1536]
        Property {
            name: "stackingLevel"
            type: "int"
            read: "stackingLevel"
            write: "setStackingLevel"
            notify: "stackingLevelChanged"
            index: 0
        }
        Signal { name: "stackingLevelChanged" }
    }
    Component {
        file: "qwaylandquickitem.h"
        name: "QWaylandQuickItem"
        accessSemantics: "reference"
        defaultProperty: "data"
        parentProperty: "parent"
        prototype: "QQuickItem"
        exports: [
            "QtWayland.Compositor/WaylandQuickItem 1.0",
            "QtWayland.Compositor/WaylandQuickItem 1.13",
            "QtWayland.Compositor/WaylandQuickItem 2.0",
            "QtWayland.Compositor/WaylandQuickItem 2.1",
            "QtWayland.Compositor/WaylandQuickItem 2.4",
            "QtWayland.Compositor/WaylandQuickItem 2.7",
            "QtWayland.Compositor/WaylandQuickItem 2.11",
            "QtWayland.Compositor/WaylandQuickItem 6.0",
            "QtWayland.Compositor/WaylandQuickItem 6.3"
        ]
        exportMetaObjectRevisions: [
            256,
            269,
            512,
            513,
            516,
            519,
            523,
            1536,
            1539
        ]
        Property {
            name: "compositor"
            type: "QWaylandCompositor"
            isPointer: true
            read: "compositor"
            notify: "compositorChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "surface"
            type: "QWaylandSurface"
            isPointer: true
            read: "surface"
            write: "setSurface"
            notify: "surfaceChanged"
            index: 1
        }
        Property {
            name: "paintEnabled"
            type: "bool"
            read: "isPaintEnabled"
            write: "setPaintEnabled"
            notify: "paintEnabledChanged"
            index: 2
        }
        Property {
            name: "touchEventsEnabled"
            type: "bool"
            read: "touchEventsEnabled"
            write: "setTouchEventsEnabled"
            notify: "touchEventsEnabledChanged"
            index: 3
        }
        Property {
            name: "origin"
            type: "QWaylandSurface::Origin"
            read: "origin"
            notify: "originChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "inputEventsEnabled"
            type: "bool"
            read: "inputEventsEnabled"
            write: "setInputEventsEnabled"
            notify: "inputEventsEnabledChanged"
            index: 5
        }
        Property {
            name: "focusOnClick"
            type: "bool"
            read: "focusOnClick"
            write: "setFocusOnClick"
            notify: "focusOnClickChanged"
            index: 6
        }
        Property {
            name: "subsurfaceHandler"
            type: "QObject"
            isPointer: true
            read: "subsurfaceHandler"
            write: "setSubsurfaceHandler"
            notify: "subsurfaceHandlerChanged"
            index: 7
        }
        Property {
            name: "output"
            type: "QWaylandOutput"
            isPointer: true
            read: "output"
            write: "setOutput"
            notify: "outputChanged"
            index: 8
        }
        Property {
            name: "bufferLocked"
            type: "bool"
            read: "isBufferLocked"
            write: "setBufferLocked"
            notify: "bufferLockedChanged"
            index: 9
        }
        Property {
            name: "allowDiscardFrontBuffer"
            type: "bool"
            read: "allowDiscardFrontBuffer"
            write: "setAllowDiscardFrontBuffer"
            notify: "allowDiscardFrontBufferChanged"
            index: 10
        }
        Signal { name: "surfaceChanged" }
        Signal { name: "compositorChanged" }
        Signal { name: "paintEnabledChanged" }
        Signal { name: "touchEventsEnabledChanged" }
        Signal { name: "originChanged" }
        Signal { name: "surfaceDestroyed" }
        Signal { name: "inputEventsEnabledChanged" }
        Signal { name: "focusOnClickChanged" }
        Signal {
            name: "mouseMove"
            Parameter { name: "windowPosition"; type: "QPointF" }
        }
        Signal { name: "mouseRelease" }
        Signal { name: "subsurfaceHandlerChanged" }
        Signal { name: "outputChanged" }
        Signal { name: "bufferLockedChanged" }
        Signal { name: "allowDiscardFrontBufferChanged" }
        Method {
            name: "takeFocus"
            Parameter { name: "device"; type: "QWaylandSeat"; isPointer: true }
        }
        Method { name: "takeFocus"; isCloned: true }
        Method {
            name: "setPaintEnabled"
            Parameter { name: "paintEnabled"; type: "bool" }
        }
        Method { name: "raise" }
        Method { name: "lower" }
        Method {
            name: "sendMouseMoveEvent"
            Parameter { name: "position"; type: "QPointF" }
            Parameter { name: "seat"; type: "QWaylandSeat"; isPointer: true }
        }
        Method {
            name: "sendMouseMoveEvent"
            isCloned: true
            Parameter { name: "position"; type: "QPointF" }
        }
        Method { name: "surfaceMappedChanged" }
        Method { name: "handleSurfaceChanged" }
        Method {
            name: "parentChanged"
            Parameter { name: "newParent"; type: "QWaylandSurface"; isPointer: true }
            Parameter { name: "oldParent"; type: "QWaylandSurface"; isPointer: true }
        }
        Method { name: "updateSize" }
        Method {
            name: "updateBuffer"
            Parameter { name: "hasBuffer"; type: "bool" }
        }
        Method { name: "updateWindow" }
        Method { name: "updateOutput" }
        Method { name: "beforeSync" }
        Method {
            name: "handleSubsurfaceAdded"
            Parameter { name: "childSurface"; type: "QWaylandSurface"; isPointer: true }
        }
        Method {
            name: "handleSubsurfacePosition"
            Parameter { name: "pos"; type: "QPoint" }
        }
        Method {
            name: "handlePlaceAbove"
            Parameter { name: "referenceSurface"; type: "QWaylandSurface"; isPointer: true }
        }
        Method {
            name: "handlePlaceBelow"
            Parameter { name: "referenceSurface"; type: "QWaylandSurface"; isPointer: true }
        }
        Method {
            name: "handleDragStarted"
            Parameter { name: "drag"; type: "QWaylandDrag"; isPointer: true }
        }
        Method {
            name: "updateInputMethod"
            Parameter { name: "queries"; type: "Qt::InputMethodQueries" }
        }
        Method { name: "updateFocus" }
        Method {
            name: "mapToSurface"
            type: "QPointF"
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "mapFromSurface"
            revision: 269
            type: "QPointF"
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "inputMethodQuery"
            type: "QVariant"
            Parameter { name: "query"; type: "Qt::InputMethodQuery" }
            Parameter { name: "argument"; type: "QVariant" }
        }
        Method { name: "setPrimary" }
    }
    Component {
        file: "qwaylandquickoutput.h"
        name: "QWaylandQuickOutput"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QWaylandOutput"
        interfaces: ["QQmlParserStatus"]
        exports: [
            "QtWayland.Compositor/WaylandOutput 1.0",
            "QtWayland.Compositor/WaylandOutput 6.0"
        ]
        exportMetaObjectRevisions: [256, 1536]
        Property { name: "data"; type: "QObject"; isList: true; read: "data"; index: 0; isReadonly: true }
        Property {
            name: "automaticFrameCallback"
            type: "bool"
            read: "automaticFrameCallback"
            write: "setAutomaticFrameCallback"
            notify: "automaticFrameCallbackChanged"
            index: 1
        }
        Signal { name: "automaticFrameCallbackChanged" }
        Method { name: "updateStarted" }
    }
    Component {
        file: "qwaylandquickshellsurfaceitem.h"
        name: "QWaylandQuickShellSurfaceItem"
        accessSemantics: "reference"
        prototype: "QWaylandQuickItem"
        exports: [
            "QtWayland.Compositor/ShellSurfaceItem 1.0",
            "QtWayland.Compositor/ShellSurfaceItem 1.13",
            "QtWayland.Compositor/ShellSurfaceItem 2.0",
            "QtWayland.Compositor/ShellSurfaceItem 2.1",
            "QtWayland.Compositor/ShellSurfaceItem 2.4",
            "QtWayland.Compositor/ShellSurfaceItem 2.7",
            "QtWayland.Compositor/ShellSurfaceItem 2.11",
            "QtWayland.Compositor/ShellSurfaceItem 6.0",
            "QtWayland.Compositor/ShellSurfaceItem 6.3"
        ]
        exportMetaObjectRevisions: [
            256,
            269,
            512,
            513,
            516,
            519,
            523,
            1536,
            1539
        ]
        Property {
            name: "shellSurface"
            type: "QWaylandShellSurface"
            isPointer: true
            read: "shellSurface"
            write: "setShellSurface"
            notify: "shellSurfaceChanged"
            index: 0
        }
        Property {
            name: "moveItem"
            type: "QQuickItem"
            isPointer: true
            read: "moveItem"
            write: "setMoveItem"
            notify: "moveItemChanged"
            index: 1
        }
        Property {
            name: "autoCreatePopupItems"
            type: "bool"
            read: "autoCreatePopupItems"
            write: "setAutoCreatePopupItems"
            notify: "autoCreatePopupItemsChanged"
            index: 2
        }
        Property {
            name: "staysOnTop"
            type: "bool"
            read: "staysOnTop"
            write: "setStaysOnTop"
            notify: "staysOnTopChanged"
            index: 3
        }
        Property {
            name: "staysOnBottom"
            type: "bool"
            read: "staysOnBottom"
            write: "setStaysOnBottom"
            notify: "staysOnBottomChanged"
            index: 4
        }
        Signal { name: "shellSurfaceChanged" }
        Signal { name: "moveItemChanged" }
        Signal { name: "autoCreatePopupItemsChanged" }
        Signal { name: "staysOnTopChanged" }
        Signal { name: "staysOnBottomChanged" }
    }
    Component {
        file: "qwaylandquicksurface.h"
        name: "QWaylandQuickSurface"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QWaylandSurface"
        exports: [
            "QtWayland.Compositor/WaylandSurface 1.0",
            "QtWayland.Compositor/WaylandSurface 1.13",
            "QtWayland.Compositor/WaylandSurface 1.14",
            "QtWayland.Compositor/WaylandSurface 6.0",
            "QtWayland.Compositor/WaylandSurface 6.4"
        ]
        exportMetaObjectRevisions: [256, 269, 270, 1536, 1540]
        Property { name: "data"; type: "QObject"; isList: true; read: "data"; index: 0; isReadonly: true }
        Property {
            name: "useTextureAlpha"
            type: "bool"
            read: "useTextureAlpha"
            write: "setUseTextureAlpha"
            notify: "useTextureAlphaChanged"
            index: 1
        }
        Signal { name: "useTextureAlphaChanged" }
    }
    Component {
        file: "qwaylandresource.h"
        name: "QWaylandResource"
        accessSemantics: "value"
        exports: [
            "QtWayland.Compositor/waylandresource 1.0",
            "QtWayland.Compositor/waylandresource 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [256, 1536]
    }
    Component {
        file: "qwaylandseat.h"
        name: "QWaylandSeat"
        accessSemantics: "reference"
        prototype: "QWaylandObject"
        exports: [
            "QtWayland.Compositor/WaylandSeat 1.0",
            "QtWayland.Compositor/WaylandSeat 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [256, 1536]
        Enum {
            name: "CapabilityFlags"
            alias: "CapabilityFlag"
            values: ["Pointer", "Keyboard", "Touch", "DefaultCapabilities"]
        }
        Property {
            name: "drag"
            type: "QWaylandDrag"
            isPointer: true
            read: "drag"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "keymap"
            type: "QWaylandKeymap"
            isPointer: true
            read: "keymap"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Signal {
            name: "mouseFocusChanged"
            Parameter { name: "newFocus"; type: "QWaylandView"; isPointer: true }
            Parameter { name: "oldFocus"; type: "QWaylandView"; isPointer: true }
        }
        Signal {
            name: "keyboardFocusChanged"
            Parameter { name: "newFocus"; type: "QWaylandSurface"; isPointer: true }
            Parameter { name: "oldFocus"; type: "QWaylandSurface"; isPointer: true }
        }
        Signal {
            name: "cursorSurfaceRequest"
            Parameter { name: "surface"; type: "QWaylandSurface"; isPointer: true }
            Parameter { name: "hotspotX"; type: "int" }
            Parameter { name: "hotspotY"; type: "int" }
        }
        Signal {
            name: "cursorSurfaceRequested"
            Parameter { name: "surface"; type: "QWaylandSurface"; isPointer: true }
            Parameter { name: "hotspotX"; type: "int" }
            Parameter { name: "hotspotY"; type: "int" }
            Parameter { name: "client"; type: "QWaylandClient"; isPointer: true }
        }
        Method {
            name: "sendKeyEvent"
            Parameter { name: "qtKey"; type: "int" }
            Parameter { name: "pressed"; type: "bool" }
        }
        Method {
            name: "sendTouchPointPressed"
            type: "uint"
            Parameter { name: "surface"; type: "QWaylandSurface"; isPointer: true }
            Parameter { name: "id"; type: "int" }
            Parameter { name: "position"; type: "QPointF" }
        }
        Method {
            name: "sendTouchPointReleased"
            type: "uint"
            Parameter { name: "surface"; type: "QWaylandSurface"; isPointer: true }
            Parameter { name: "id"; type: "int" }
            Parameter { name: "position"; type: "QPointF" }
        }
        Method {
            name: "sendTouchPointMoved"
            type: "uint"
            Parameter { name: "surface"; type: "QWaylandSurface"; isPointer: true }
            Parameter { name: "id"; type: "int" }
            Parameter { name: "position"; type: "QPointF" }
        }
        Method {
            name: "sendTouchFrameEvent"
            Parameter { name: "client"; type: "QWaylandClient"; isPointer: true }
        }
        Method {
            name: "sendTouchCancelEvent"
            Parameter { name: "client"; type: "QWaylandClient"; isPointer: true }
        }
    }
    Component {
        file: "qwaylandshell.h"
        name: "QWaylandShell"
        accessSemantics: "reference"
        prototype: "QWaylandCompositorExtension"
        exports: [
            "QtWayland.Compositor/Shell 1.0",
            "QtWayland.Compositor/Shell 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [256, 1536]
        Enum {
            name: "FocusPolicy"
            values: ["AutomaticFocus", "ManualFocus"]
        }
        Property {
            name: "focusPolicy"
            type: "FocusPolicy"
            read: "focusPolicy"
            write: "setFocusPolicy"
            notify: "focusPolicyChanged"
            index: 0
        }
        Signal { name: "focusPolicyChanged" }
    }
    Component {
        file: "qwaylandshellsurface.h"
        name: "QWaylandShellSurface"
        accessSemantics: "reference"
        prototype: "QWaylandCompositorExtension"
        exports: [
            "QtWayland.Compositor/ShellSurface 1.0",
            "QtWayland.Compositor/ShellSurface 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [256, 1536]
        Property {
            name: "windowType"
            type: "Qt::WindowType"
            read: "windowType"
            notify: "windowTypeChanged"
            index: 0
            isReadonly: true
        }
        Signal { name: "windowTypeChanged" }
    }
    Component {
        file: "qwaylandsurface.h"
        name: "QWaylandSurface"
        accessSemantics: "reference"
        prototype: "QWaylandObject"
        exports: [
            "QtWayland.Compositor/WaylandSurfaceBase 1.0",
            "QtWayland.Compositor/WaylandSurfaceBase 1.13",
            "QtWayland.Compositor/WaylandSurfaceBase 1.14",
            "QtWayland.Compositor/WaylandSurfaceBase 6.0",
            "QtWayland.Compositor/WaylandSurfaceBase 6.4"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [256, 269, 270, 1536, 1540]
        Enum {
            name: "Origin"
            values: ["OriginTopLeft", "OriginBottomLeft"]
        }
        Property {
            name: "client"
            type: "QWaylandClient"
            isPointer: true
            read: "client"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "sourceGeometry"
            revision: 269
            type: "QRectF"
            read: "sourceGeometry"
            notify: "sourceGeometryChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "destinationSize"
            revision: 269
            type: "QSize"
            read: "destinationSize"
            notify: "destinationSizeChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "bufferSize"
            revision: 269
            type: "QSize"
            read: "bufferSize"
            notify: "bufferSizeChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "bufferScale"
            type: "int"
            read: "bufferScale"
            notify: "bufferScaleChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "contentOrientation"
            type: "Qt::ScreenOrientation"
            read: "contentOrientation"
            notify: "contentOrientationChanged"
            index: 5
            isReadonly: true
        }
        Property {
            name: "origin"
            type: "QWaylandSurface::Origin"
            read: "origin"
            notify: "originChanged"
            index: 6
            isReadonly: true
        }
        Property {
            name: "hasContent"
            type: "bool"
            read: "hasContent"
            notify: "hasContentChanged"
            index: 7
            isReadonly: true
        }
        Property {
            name: "cursorSurface"
            type: "bool"
            read: "isCursorSurface"
            write: "markAsCursorSurface"
            notify: "cursorSurfaceChanged"
            index: 8
        }
        Property {
            name: "inhibitsIdle"
            revision: 270
            type: "bool"
            read: "inhibitsIdle"
            notify: "inhibitsIdleChanged"
            index: 9
            isReadonly: true
        }
        Property {
            name: "isOpaque"
            revision: 1540
            type: "bool"
            read: "isOpaque"
            notify: "isOpaqueChanged"
            index: 10
            isReadonly: true
        }
        Signal { name: "hasContentChanged" }
        Signal {
            name: "damaged"
            Parameter { name: "rect"; type: "QRegion" }
        }
        Signal {
            name: "parentChanged"
            Parameter { name: "newParent"; type: "QWaylandSurface"; isPointer: true }
            Parameter { name: "oldParent"; type: "QWaylandSurface"; isPointer: true }
        }
        Signal {
            name: "childAdded"
            Parameter { name: "child"; type: "QWaylandSurface"; isPointer: true }
        }
        Signal { name: "sourceGeometryChanged"; revision: 269 }
        Signal { name: "destinationSizeChanged"; revision: 269 }
        Signal { name: "bufferSizeChanged"; revision: 269 }
        Signal { name: "bufferScaleChanged" }
        Signal {
            name: "offsetForNextFrame"
            Parameter { name: "offset"; type: "QPoint" }
        }
        Signal { name: "contentOrientationChanged" }
        Signal { name: "surfaceDestroyed" }
        Signal { name: "originChanged" }
        Signal {
            name: "subsurfacePositionChanged"
            Parameter { name: "position"; type: "QPoint" }
        }
        Signal {
            name: "subsurfacePlaceAbove"
            Parameter { name: "sibling"; type: "QWaylandSurface"; isPointer: true }
        }
        Signal {
            name: "subsurfacePlaceBelow"
            Parameter { name: "sibling"; type: "QWaylandSurface"; isPointer: true }
        }
        Signal {
            name: "dragStarted"
            Parameter { name: "drag"; type: "QWaylandDrag"; isPointer: true }
        }
        Signal { name: "cursorSurfaceChanged" }
        Signal { name: "inhibitsIdleChanged"; revision: 65294 }
        Signal { name: "isOpaqueChanged"; revision: 1540 }
        Signal {
            name: "configure"
            Parameter { name: "hasBuffer"; type: "bool" }
        }
        Signal { name: "redraw" }
        Method { name: "updateSelection" }
        Method {
            name: "initialize"
            Parameter { name: "compositor"; type: "QWaylandCompositor"; isPointer: true }
            Parameter { name: "client"; type: "QWaylandClient"; isPointer: true }
            Parameter { name: "id"; type: "uint" }
            Parameter { name: "version"; type: "int" }
        }
        Method { name: "destroy" }
        Method { name: "isDestroyed"; type: "bool" }
        Method { name: "frameStarted" }
        Method { name: "sendFrameCallbacks" }
    }
    Component {
        file: "qwaylandtextinputmanager.h"
        name: "QWaylandTextInputManager"
        accessSemantics: "reference"
    }
    Component {
        file: "private/qwaylandcompositorquickextensions_p.h"
        name: "QWaylandTextInputManagerQuickExtension"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QWaylandTextInputManager"
        interfaces: ["QQmlParserStatus"]
        exports: [
            "QtWayland.Compositor/TextInputManager 1.0",
            "QtWayland.Compositor/TextInputManager 6.0"
        ]
        exportMetaObjectRevisions: [256, 1536]
        Property { name: "data"; type: "QObject"; isList: true; read: "data"; index: 0; isReadonly: true }
    }
}
